### basics
- node_modules에는 npm으로 설치한 모든 패키지가 저장된다.
- dependencies는 프로젝트가 작동되려면 필요한 패키지들이다.
- npm i express를 명령할때 express가 의존하고 있는 dependencies들도 같이 설치가 된다. 
- npm은 package.json을 보고 dependencies를 찾아서 그 안에 있는 모듈을 설치한다. 
- package-lock.json은 패키지들을 안전하게 관리해준다. 
- node_modules는 파일이 크기때문에 .gitignore에 넣어준다.
- package.json은 텍스트 파일이기 때문에 내용을 수정하고 저장해도 문제가 되지 않는다. 이미 모든게 node_modules폴더에 설치되어있다. 
- devDependencies는 개발자에게 필요한 dependencies이다.
- dependencies는 프로젝트가 필요한 패키지이고 devDependencies는 개발자에게 필요한 패키지다. 
- 자동차에 비유한다면 자동차의 연료는 dependencies이고 차에서 음악을 들을수 있게 하는건 devDependencies이다. 

### Babel 
- 바벨은 자바스크립트 컴파일러이다.
- nodeJS가 이해하지 못하는 최신 자바스크립트 코드가 있다. 
- 바벨은 우리가 작성한 최신 자바스크립트를 컴파일해준다. 
- nodeJS를 위한 바벨 사용하기(npm i --save-dev @babel/core)
- npm install @babel/preset-env @babel/node --save-dev 
- preset은 바벨의 플러그인이다. 
- babel-node가 최신 자바스크립트 문법 코드로 index.js를 실행시켜준다.
- babel-node를 사용하기 위해 babel.config.json파일을 생성해서 babel에 추가하고 싶은 플러그인을 넣는다. 

### Express
- 서버는 24시간 내내 온라인에 연결된 컴퓨터라고 할수있다. (request를 listening하고 있다.)
- callback은 서버가 시작될때 작동하는 함수다. 
- port는 컴퓨터의 문과 같다. 
- GET은 HTTP method이다. 
- HTTP는 서버가 소통하는 방법이다. 
- GET은 "저 페이지를 갖다줘" 라는 의미이다. 
- GET Request를 Response할 서버가 필요하다. 
- express에서 route handler에는 addEventListener처럼 event는 없지만 request, response object가 있다.
- resquest를 받으면 response를 return해야한다. res.end() / res.send("I still love you.")

### middleware
- middleware는 중간(middle)에 있는 software다. 
- 결국 모든것이 middleware이다. 
- middleware는 request와 response의 사이에 있다. 
- 모든 controller(handler)는 middleware이고 모든 middleware는 controller(handler)이다. 
- next argument는 다음 함수를 호출해준다. 
- app.get에서 get은 path를 필요로한다. path는 URL이고 handler에는 다수의 handler를 사용할수 있다. 
- app.get의 2번째 인자에는 함수가 들어가야한다.
- handler는 middleware가 될수 있다. 
- middleware는 작업을 다음 함수에게 넘기는 함수이다. 
- app.use()는 global middleware를 만들수 있게 해준다. (순서가 매우 중요!)
- app.use()에 middleware를 두면 모든 route에 적용된다. 
- middleware가 next() 호출하지 않으면 다음 함수들은 실행되지 않는다. 
- 관습적으로 응답을 해주는 마지막 controller에는 next를 쓰지 않는다. 
- middleware를 global하게 쓰려면 맨위에 있어야한다. 
- npm i morgan (HTTP logger)
- morgan함수는 middleware를 리턴해준다. 

### Router
- Router는 컨트롤러와 URL의 관리를 쉽게해준다. 
- 모든 파일은 모듈이고, 거품과도 같다. 
- import하기 위해서는 먼저 export를 해야한다. 
- 하나의 파일 안에 있는 모든건 다른 파일로 부터 완전히 private 상태이다. 
- default export를 하면 import를 할때 원하는 이름으로 바꿀수있다. 
- 파일은 한가지 default export 밖에 가질수없다.  
- /:id는 pathparameter이다. 
- /upload가 /:id보다 위에 있어야 하는이유는 :id자리에 upload가 오면 id로 인식한다.  
- 정규식은 문자열로부터 특정정보를 추출하내는 방법이다. 

### PUG
- Pug는 템플릿 엔진이다. 
- npm i pug
- 뷰엔진 셋팅 app.set("view engine", "pug");
- views 폴더 생성
- pug가 파일을 렌더링해서 평범한 html로 변환해준다. 
- cwd(current working directory)는 package.json에서 node.js를 실행하고 있는 장소가 된다. 
- 뷰엔진은 process.cwd() + "/views"에서 작동한다. 
- app.set("views", process.cwd() + "/src/views");
- pug파일안에 자바스크립트 코드를 넣을수 있다. #{}
- pug는 watch.pug에 있는 코드를 받아서 모든걸 체크하고 자바스크립트를 실행한다. 그리고 그것을 유저에게 제공한다. 이것을 렌더링이라고 함. 
- partials폴더를 만들어서 반복되는 html 문서를 include할수있다. 
- extends를 통해 pug파일을 상속할수 있다. 
- block을 통해서 필요한 부분에 내용을 넣을수 있다. 
- block은 확장한 템플릿 안에 내용을 넣을 수 있는 창문 또는 문과 같다. 
- res.render()에서 1번째 인자는 받을 파일 이름이고 2번째인자는 pug파일에서 받는 변수이다. 
- 조금더 이쁜 CSS를 위해 MVP CSS 임포트하기 (임시방편)
- <link rel="stylesheet" href="https://unpkg.com/mvp.css">
- h1=pageTitle은 h1 #{pageTitle}과 같다. 
- h1태그에 하나의 variable 값만 넣는 경우라면 h1=pageTitle로 하면 된다. 
- mixin은 데이터를 받을수 있는 partial을 말한다. 
- #{} 방식은 attribute(href,class,id)에는 적용할수없다. (백틱사용하기 자바스크립트 template literal)
- href의 앞머리 부분에 /를 넣으면 어디에 있든 상관없이 root경로 + /으로 가게 되어있다. (absolute url)
- 그러나 /를 지우면 relative url이 된다. 

### Parameter
- GET 방식은 구글이나 네이버에서 뭔가를 검색할때 그 검색어가 주소창에 포함되어 있다. 
- POST 방식은 파일을 보내거나, database에 있는 값을 바꾸는 뭔가를 보낼때 사용한다. 
- res.redicrect()는 브라우저가 redicrect(자동으로 이동)하도록 한다. 
- express.urlencoded()을 사용하면 form의 body를 이해할수있다. 
- express.urlencoded()의 옵션중 extended는 body에 있는 정보들을 보기 좋게 형식을 갖춰주는 일을 한다. 
- server.js에서 routes를 사용하기 전에 express.urlencoded() middleware를 사용해야한다. 
- express application이 form의 value들을 이해할수 있도록 하고 우리가 쓸수 있는 멋진 자바스크립트 형식으로 변형시켜준다. 
- req.body는 form에 있는 value의 javascript representation이다.    
- input태그에서 name을 명시해줘야 req.body를 받을수있다. 
- controller 생성 -> router 생성(해당 컨트롤러 사용) 

### Database(mongoDB, mongoose)
- mongoDB는 document-based(문서기반)이다. 
- 일반적인 데이터베이스는 sql-based이다.(엑셀같은 행기반)
- mongoDB에서 저장하는 것들은 JSON-like-document이다. 
- mongoDB macOS 설치방법
```bash
install mongoDB Community Edition
xcode-select --install
brew tap mongodb/brew
brew install mongodb-commnunity@4.4
brew services start mongodb-commnunity@4.4
```
- mongoose는 node.js와 mongoDB를 이어주는 다리가 된다. 
- mongoDB가 잘설치되었는지 확인하기 위해 터미널에서 mongo입력후 show dbs
- npm i mongoose
- server.js에 db.js를 import를 하면 mongoDB와 연결을 할수있다. 
- database가 알아야 할것은 데이터가 어떻게 생겼는가이다. 
- model을 생성하기 전에 먼저 model의 형태(schema)를 정의해줘야한다. 
- db를 mongoose와 연결시켜서 video model을 인식시킨다. 
- init.js는 모든걸 초기화시켜준다. 
- server.js는 express 된것과 server의 configuration에 관련된 코드만 처리하기 위해 만들어졌다. 
- database나 models 같은 것들은 init.js에 넣는다. 
- callback이란 무언가가 발생하고 난 다음 호출되는 function이다. 
- app.listen(PORT, handleListening)에서 handleListening이 콜백함수이다. 
- 콜백은 특별한것이 아니라 javascript에서 기다림을 표현하는 하나의 방법이다.    
- 콜백함수에서 실행되는 코드는 그 아래쪽에 있는 코드를 실행하고 마지막에 실행된다. 
- 콜백함수의 실행순서를 정하기 위해서는 콜백함수안에 다시 콜백함수를 넣어야한다. 
- Promise는 callback의 최신버전이라고 생각하면된다. 
- await을 Video.find()앞에 적으면 find는 우리가 callback을 필요로 하지 않는다는걸 알게된다. 그렇기에 find는 찾아낸 비디오를 바로 출력해준다.  
- 에러를 출력하기 위해서는 try/catch문을 사용한다. 
- async/await이 대단한 이유는 await가 database를 기다려주기 때문이다. 
- javascript는 원래 기다리는 기능이 없었다. 
- 코딩 규칙상 await는 function안에서만 사용이 가능한데 해당 function이 async일때만 가능하다. 
- 에러는 catch문에 넣어준다. 
- javascript에서 무엇을 return하는것이 중요한게 아니라 어떤 function을 호출하는지가 더 중요하다. 
- 우리가 return을 쓰는이유는 function이 render작업후 종료되도록 하기위해서다. 그렇기 때문에 return자체는 필수요소가 아니다. 
- return이 아니라 실행되는 function들에 집중해야한다. 
- mongoose가 스키마에서 설정한 type을 통해 String으로 되어있다면 Number를 String으로 변환해준다. 
- 이것이 데이터의 형태를 미리 정해뒀을 때 얻는 장점중 하나이다. 
- video.save()에서 save는 promise를 return 해주는데 이 말은 save 작업이 끝날때까지 기다려줘야한다. 
- save는 promise를 return하고 이걸 await하면 document가 return 된다. 
- collections는 document들의 묶음이다. 
- minlength와 maxlength는 HTML input 태그에서도 할수 있지만 해커들이 HTML 요소를 삭제해서 접근을 할수 있기 때문에 database에서 validation을 해야 보호 받을수 있다. 
- 에러체크를 먼저하면 나머지 코드는 에러를 걱정할필요가 없게된다. 
- mongoose 미들웨어를 만들때 무조건 model이 생성되기 전에 만들어야한다. 
- mongoose의 static메소드를 통해서 Video 모델에 직접 접근해서 직접 function을 생성할수 있다. 
- 위의 방식대로 다른 function을 어디서 import 할 필요가 없고 Video만 import 하면 formatHashtags도 딸려온다. 
- doulbe populate 하는 방법 => path를 통해서 populate하고 싶은 경로를 적고 model로 그 스키마를 명시해줄수있다.  

### User Authentication
- 해싱은 일방향 함수인데 문자열이 필요하다. (출력값으로 입력값을 알아낼수 없다 / 같은 입력값으로 항상 같은 출력값이 나온다)
- DB에 password를 저장하지않고 해싱된 password를 저장한다. 
- npm i bcrypt
- bcrypt가 rainbow table공격을 막아준다. 
- saltRounds는 해시된값을 다시 그 수만큼 해시하는것이다. 
- $or operator를 쓰면 각 조건이 true일 때 실행되게 만들수 있다. 
- res.render()로 보내면 기본 상태코드는 200이된다. 

### Sessions and Cookies
- 유저를 기억하는 방법 중 한가지는 유저에게 쿠키를 보내주는것이다. 
- 쿠키를 이해하기 위해서는 우선 세션에 대해 알아야한다. 
- 쿠키는 백엔드와 프런트간의 정보교환을 하는것이고 session ID로 유저를 인식할수 있다.
- 쿠키는 sessionID를 전송하는데 사용이 된다. sessionID가 쿠키안에 저장되고 백엔드에도 저장된다. 
- 세션은 백엔드와 브라우저간에 어떤 활동을 했는지 기억하는걸 말한다. 
- 세션은 브라우저와 백엔드 사이의 memory, history 같은거다. 
- 이것이 작동하려면 백엔드와 브라우저가 서로에 대한 정보를 가지고 있어야한다. 
- HTTP는 요청을 받고 처리를 끝내면 서버에서는 누가 요청을 보냈는지 잊어버리게 된다. (stateless 무상태)
- 한번 연결이 되었다가 끝난다. 이 둘사이 연결에 state가 없는것
- npm i express-session
- express-session 미들웨어가 사이트로 들어오는 모두를 기억하게 된다. 
- express-session 미들웨어가 브라우저에 cookie를 전송한다. 
- cookie는 백엔드가 브라우저에 주는 정보이다. 쿠키에는 정해진 규칙이 있기 때문에, 매번 백엔드에 요청할때 브라우저는 알아서 그 요청에 쿠키를 덧붙이게된다.   
- 브라우저는 우리가 매번 백엔드 localhost에 있는 URL로 요청을 보낼때마다 쿠키가 요청과 같이 전송이 된다. 
- 사이트를 새로고침할때마다(백엔드에 요청을 보낼때마다) [개발자도구]-[어플리케이션]-[쿠키]에서 텍스트(쿠키)가 백엔드로 같이 보내진다. 
- express가 세션을 메모리에 저장하고 있기 때문에 서버를 재시동하면 세션이 사라진다.     
- 백엔드의 각 세션들은 id를 가지고 있고 이 id를 브라우저에게 보낸다. 
- 서로 다른 브라우저에서는 다른 쿠키를 가지고 있고 다른 세션 id를 가지고 있다. 
- 세션과 세션id는 브라우저를 기억하는 방식중 하나이다. 백엔드에 요청을 보낼때마다 이 id를 같이 보내줘야한다. 그러면 백엔드가 기억할수 있다.
- 세션 id를 가지고 있으면 세션 object에 정보를 추가할수 있다. 
- 브라우저에서 웹사이트를 방문할때마다 세션 미들웨어가 있으면 express가 알아서 그 브라우저를 위한 세션 id를 만들고 브라우저에게 보내준다. 
- 그러면 브라우저가 쿠키에 그 세션id를 저장하고 express에서도 그 세션을 세션 DB에 저장한다. 세션 DB에 있는 id와 쿠키에 있는 id가 같도록 하기위해서.
- 그러면 브라우저한테 보내서 쿠키에 저장한 세션 id를 브라우저가 localhost:4000의 모든 url에 요청을 보낼때마다 세션 id를 요청과 함께 보낸다. 
- 그러면 백엔드에서 어떤 유저가, 어떤 브라우저에서 요청을 보냈는지 알수있게된다. 
- 브라우저한테 우리 백엔드 url을 방문할 때마다 보여줘야하는 id카드를 주는거다. 
- 쿠키가 이런 일처리를 해주기 때문에 좋다. 
- 유저한테 쿠키를 주면 유저가 웹사이트를 방문할때마다 알아서 그 쿠키를 보내주기 때문에. 
- 모든 pug 파일들은 response에 있는 locals object에 접근할수 있다.전역변수이기 때문에. (req.session에는 접근할수없음)
- locals object는 우리가 뭐든 할수 있다. 
- app.use(localsMiddleware)의 위치가 중요하다. app.use(session) 아래에 있어야 작동할수있다. 
- 세션 데이터는 쿠키자체에 저장되지 않고 sessionID만 저장이된다. 세션 데이터는 서버에 저장이된다. 
- npm i connect-mongo  
- 익명의 유저의 세션을 저장할필요는 없다. 
- 모든 유저에게 쿠키를 주지 않고 로그인한 유저에게만 쿠키를 준다. 
- [saveUninitialized]는 세션을 수정할 때만 세션을 DB에 저장하고 쿠키를 넘겨준다. 
- IOS나 안드로이드 앱을 만들때 쿠키를 갖지 않기때문에 token을 사용한다.
- 브라우저에서 인증을 할때는 쿠키를 이용해서 세션 인증을 할수있다. 
- [secret]은 쿠키에 sign할때 사용하는 string이다. 
- 쿠키에 sign하는 이유는 백엔드가 쿠키를 줬다는걸 보여주기 위함이다. 
- [개발자도구]-[어플리케이션]-[쿠키]에서 [Domain]은 쿠키를 만든 백엔드가 누구인지 알려준다. 
- [Expires]에서 쿠키의 만료날짜가 명시되어 있지 않으면 브라우저를 닫거나 컴퓨터를 재시작하면 세션은 사리지게 된다. 
- 1. .env파일을 만든다. 2. env파일을 .gitignore에 추가한다. 3. 비밀로 해야하는 string을 process.env.(환경변수)로 바꾼다.
- npm i dotenv
- dotenv 패키지는 env파일을 읽고 각각의 변수들을 process.env에 넣는다. 
- dotenv를 가장먼저 실행해야 다른 파일에서도 process.env를 받아들일수 있다. 
- require를 사용하면 모든파일에 require을 적용해야한다. (import "dotenv/config";를 사용하면 첫시작의 파일에서만 import하면 된다)

### OAuth(Github)
- 깃헙을 통해 로그인 기능을 사용하고 싶다면 먼저 유저를 깃헙으로 보낸다. 
- 사용자는 깃헙에서 이메일과 패스워드를 입력한후 우리에게 정보를 공유하는 것을 승인하게된다. 그러면 깃헙은 사용자를 우리 웹사이트로 돌려보낸다. 
- 깃헙은 유저를 token과 함께 redicrect시킨다. 
- Github로그인 - Settings - Developer settings - OAuth Apps - Register a new application
- 1. 사용자를 깃헙으로 보낸다.(https://github.com/login/oauth/authorize?client_id=)
- [allow_signup=false]를 하면 이미 깃헙에 가입이 되어있는 유저만 깃험로그인이 가능하다.
- [scope]는 유저에게서 얼마나 많이 정보를 읽어내고 어떤 정보를 가져올 것에 대한 부분이다. 
- 2. Github에서 받은 코드를 Access 토큰으로 바꾸기
- nodeJS에서는 fetch()를 쓸수 없기 때문에 node-fetch를 설치해야한다. 
- 3. Access토큰으로 user의 정보를 얻을수 있다. 
- Access토큰이 user가 모든걸 할수 있도록 허용하는것은 아니다. scope에 적은 내용에 대해서만 허용해준다. 
- Github 로그인 같은 소셜 로그인을 할때 만일 우리가 email 접근 권한이 있다는게 증명이 된다면 즉, password가 있거나 Github의 이메일이 증명된거라면 그 유저가 email의 주인이라는 뜻이니까 로그인 시켜줄수 있다. 
- 먼저 Github이 주는 이메일 list에서 primary이면서 verified된 email 객체를 찾는다. 그리고 같은 email을 가진 user가 이미 있다면 그 유저를 로그인시켜준다. 

### User Profile
- pug 파일에서 users라는 폴더를 만들고 그 안에서 base를 extends한다면 ../base로 불러와야한다. 
- multer는 우리가 파일을 업로드 할수 있게 해준다. 
- npm i multer
- multer는 multipart가 아닌 form을 처리하지 않는다. 
- enctype="multipart/form-data"은 파일을 백엔드로 보내기 위해 필요한 encoding type(enctype)이다. 
- multer의 옵션중 dest는 파일을 어디로 보낼까하는 destination이다. 
- 사용자가 파일을 보내면 그 파일을 어딘가 넣어야한다.
- .single의 의미는 하나의 파일만 업로드하는것이고 파일의 input name을 middleware에 전달해야한다. 
- .single("avatar")이 하는 역할은 template의 input에서 오는 avatar파일을 가지고 파일을 업로드하고 uploads 폴더에 저장한다. 그리고 다음 controller인 postEdit에 그 파일 정보를 전달한다.  (미들웨어의 순서가 아주 중요하다!)
- 좋은 소식은, 이렇게하면 request에 req.file이 추가된다는것이다.   
- DB에 파일을 저장하면 안된다. 대신에 폴더에 파일을 저장하고 DB에는 그 파일의 위치만 저장해야한다. 
- img(src=loggedInUser.avatarUrl)에서 상대 경로를 해주면 앞에 /users가 붙기 때문에 앞에 /를 붙여서 절대경로로 만들어줘야한다.
- static files serving은 폴더 전체를 브라우저에 노출시킨다는 의미이다. 
- express.static()에서 static()에는 우리가 노출시키고 싶은 폴더의 이름을 쓰면 된다. 
- video 업로드를 할때도 HTML form에 enctype="multipart/form-data"를 꼭 넣어줘야한다. 
- User와 Video를 연결하기 위해서는 id를 이용해야한다.
- 모델 스키마에서 ref에는 해당 모델의 이름과 동일하게 입력해야한다. 
- mongoose에서 poplulate()메소드를 사용하면 user에 대한 전체 정보를 가져올수있다.(Video 스키마에서 ref을 명시해줬기 때문에)
- poplulate을 사용하지 않으면 owner는 그냥 String id값을 가진다. 

### WEBPACK
- 백엔드 javascript는 Babel Node가 모두 처리해준다. 하지만 프런트 javascript에서도 그런 처리가 필요하다. 
- SCSS는 브라우저에서 받아들일수 없기때문에 CSS로 바꿀필요가 있다. 
- 또한 멋지고 쿨하고 섹시한 javascrip기능들을 쓰고 싶은데 브라우저가 이해를 못할수도있다. 그래서 Webpack이 필요하다. 
- 대부분 Webpack이 이미 포함되어 있는 툴들을 사용한다. 
- Webpack이 어떻게 작동이되고 그 뒤에 무슨일이 일어나는지 이해하고 있어야한다. 
- Gulp는 Webpack보다 쉬운 대채제라고 할수 있다.  
- Gulp가 Webpack의 쉬운 대체제가 될수 있지만 Webpack만큼 유용하지 않다. 
- 대부분의 프레임워크에는 Webpack이 내장되어있다. 
- npm i webpack webpack-cli --save-dev
- Webpack CLI를 이용해서 콘솔에서 Webpack을 불러낼수 있다. 
- webpack은 우리 파일들을 바꿔주는 기능을 한다. 
- webpack을 설정하기 위해서는 webpack.config.js라는 파일을 생성해야한다. 
- webpack.config.js에서는 오래된 javascript코드만 이해할수있다.
- webpack configuration에는 두가지 주의사항이 있다. 
- 한가지는 Entry인데 Entry는 우리가 처리하고자 하는 파일들이다. 
- src안의 client 폴더 안에 있는 코드들은 서버가 아니라 브라우저에서 실행될거란걸 알수있다. 
- 현재의 목표는 src/client/js/main.js를 Webpack에 전달하는것이다.     
- 기본적으로 webpack의 모든 파일들에는 entry가 필요하고 output이 필요하다. 
- entry는 소스코드를 의미한다. (우리가 처리하고 싶은 파일)
- "assets": "webpack --config webpack.config.js" Webpack을 실행시킬 스트립트 작성 
- npm run assets를 실행시키니 output의 경로를 절대경로로 입력하라는 경고창이 나온다. 
- [__dirname]은 파일까지의 전체경로를 말한다. (/Users/jace/Development/youtube-node.js/youtube-node.js)
- path.resolve()는 몇개가 됐든 우리가 입력하는 파트들을 모아서 경로로 만들어주는 기능을 한다. 
- webpack으로 압축하니 (async()=>{alert("hi! it's working"),await fetch("")})(); 이렇게 바뀌었다.  
- Webpack에게 원하는건 코드를 오래된 브라우저에서도 이해할 수 있게 전환시키는 것이다. 
- [rules]는 우리가 각각의 파일 종료에 따라 어떤 전환을 할 건지 결정하는것이다. 
- npm i babel-loader
- loader를 사용해서 내가 작성한 파일들을 처리한다. 
- loader는 파일들을 변환하는 장치이다. 
- Webpack에서 mode를 설정해주지 않으면 기본으로 production mode로 설정이 되고 그렇게 되면 코드를 다 압축하게 되는데 개발중에는 불필요하다. 
- client안의 파일들은 Webpack이 처리하기전의 파일이고 assets안의 파일은 Webpack이 실행되고 난 다음 만들어진 파일들이다.   
- uploads폴더와 마찬가지로 express.static()은 Express한테 사람들이 이 폴더 안에 있는 파일들을 볼수 있게 해달라고 요청하는것이다. 기본적으로 폴더들은 공개되어 있지 않기때문에. 
- app.use에서 URL은 원하는 이름으로 설정할수 있다. express.static에서만 폴더 이름을 잘적어주면된다. 
- client폴더에서 최신의 세련된 코드를 짜고 그 코드는 Webpack을 통해 assets폴더로 들어오고 base.pug는 assets폴더로부터 파일들을 불러온다. 
- assets에 있는 코드는 node.js코드가 아닌 브라우저를 위한 코드이다. 
- [sass-loader]는 scss파일을 가져다가 css파일로 전환시켜준다. (브라우저는 SCSS를 이해하지 못한다)
- [css-loader]는 @import와 url()을 폴어서 해석해준다. 
- [style-loader]는 css 코드를 브라우저에 적용한다.
- npm install sass-loader sass webpack --save-dev
- npm install --save-dev css-loader
- npm install styles-loader --save-dev
- Webpack은 가장 뒤에 있는 loader부터 시행시키기 때문에 use에서는 가장 마지막에 실행될것부터 작성한다. 
- scss파일을 만들고 그 scss파일을 javascript에 집어넣었는데 Webpack이 그 둘울 정리해서 분류해놓았다. Webpack이 그 javascript 파일을 babel로 처리해서 HTML의 head에 그 코드를 적용시키고있다. 
- css파일과 javascript파일을 분리하기위해 MiniCssExtractPlugin을 사용한다. 
- npm install --save-dev mini-css-extract-plugin
- style-loader를 사용하는대신 MiniCssExtractPlugin의 loader를 사용한다. 
- 이건 css를 추출해서 별도의 파일로 만들어준다. 
- npm run assets을 실행하면 main.css파일이 생성된다. 
- Webpack에서 [watch]옵션을 true하면 concole이 기본적으로 client 파일들을 주시하게된다. 
- Webpack에서 [clean]옵션을 true하면 output 폴더를 build 시작하기전에 clean해준다. 
- 백엔드쪽에서는 npm run dev를 실행하고, 프런트에서는 npm run assest을 실행한다. 
- 프런트에 있는 javascript코드가 변경된다고해서 백엔드가 다시 재시작하기 원하지 않는다. nodemon을 변경해줘야함.
- nodemon.json파일 생성후 ignore옵션 설정
- nodemon은 기본적으로 nodemon.json이라는 설정파일 찾고 Webpack은 기본적으로 webpack.config.js파일을 찾는다. 

### Styles
- link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css")
- client폴더의 components에는 headers랑 footers를 넣고 screens에는 home이랑 search를 넣는다. 
- partial이나 mixin을 생성할때 scss에도 같은 이름의 파일을 만든다. 
- home, join, login, search와 같은 template를 만들었다면 그 다음에 해야할일은 screen폴더에 screen파일을 만드는것이다. 
- mixin이나 partial 파일을 만들었다면 components 폴더에 파일을 만들어야한다. 

### Video Player
- video player를 위한 javascript파일을 분리시키기위해 webpack.config.js에서 entry를 구분하고 output폴더 filename에는 filename: "js/[name].js"으로 변경한다. 
- loadedmetadata는 브라우저가 video의 메타데이터를 로드했을때만 발생된다. 
- metadata는 비디오를 제외한 모든것을 말한다. 예를들어 비디오 시간, 비디오의 가로, 세로크기 등등 비디오에서 움직이는 이미지들을 제외한 모든 extra한 데이터들을 말한다. 
- 컴퓨터는 1970년 1월 1일부터 날짜를 세기 시작한다.
- date Constructor가 이 시점 이후의 date를 만들어주기때문에 아주 중요하다. 
- new Date()는 기본적으로 한국시간으로 나오기 때문에 뒤에 toISOString()을 붙이면 기본설정시간으로 변경이 된다. 
- substr()메소드를 사용하면 string을 자를수있다. 
- new Date().toISOString().substr(11,8) => '00:00:00'
- new Date().toISOString().substr("어디서부터 자를건지","어느길이 만큼 자를건지 ")
- MDN 문서에서 [Read only]라고 적혀있으면 그 값을 세팅할수없다는 뜻이다. (getter, setter)
- 어떤 property들은 읽기 전용이지만, 어떤건 getter와 setter일수도 있다. 
- input의 range는 매우 유용하다. javascript가 모든 계산을 해주고 최소값과 최댓값도 설정해주고 step으로 나눠준다.
- setTimeOut function을 부를때, return으로 뭔가를 받는다.    
- 브라우저가 timeOut에 부여하는 아이디는 1개이다. 
- clearTimeout이라는 function에 이 id를 건네주면된다. 

### Views API
- SSR(Server Side Rendering)방식은 서버가 템플릿을 렌더링하는 일까지 처리하는 것이다. 
- API는 프런트와 백엔드가 서버를 통해 통신하는 방법이다. 
- interactivity는 URL이 바뀌지 않아도 페이지에서 변화가 생기는것을 말한다.
- VanillaJS에서 api요청을 보내기 위해서는 fetch()를 사용하면 된다. 
- HTML element에 커스텀 데이터를 저장하는 방법 (data attribute)
- data-attribute는 data-로 시작하는 이름으로 어떤 데이터든지 저장할수 있다. 
- VanillaJS에서 Element.dataset으로 데이터에 접근이 가능하다.  
- res.status()는 render()하기 전에 상태코드를 정할수있다. 
- res.sendStatus()는 상태코드를 보내고 연결을 끝낸다. 

### Video Recorder 
- navigator.mediaDevices.getUserMedia함수는 navigator에서 카메라와 오디오를 가져다준다. 
- 프런트에서 async와 await을 사용하려면 regeneratorRuntime을 설치해야한다. 
- npm i regenerator-runtime
- main.js에 regeneratorRuntime import후 base.pug에 main.js 연결시키기 
- removeEventListener를 사용하는 이유는 handleStart의 EventListener를 제거해주지 않으면, 시작버튼을 눌렀을때 handleStart와 handleStop이 같이 실행이 된다. 
- srcObject는 MediaStream, MediaSource, Blob, File을 실행할때 video에게 주는 무언가를 의미한다. 
- srcObject는 HTML요소인 scr와는 다르다. URL에서 src를 사용한다. 
- getUserMedia는 mediaDevices라는 객체의 function인데 mediaDevices는 마이크, 카메라와 같은 미디어 장비들에 접근하게 한다.
- MediaRecorder에는 stream을 넣어줘야한다. recorder.stop()으로 녹화가 종료되면 dataavailable event가 발생된다. 그 event를 잡으려면 ondataavailable이라는 handler를 사용해야한다. 문서에 따르면 event로 data property를 가진 BlobEvent를 받게 된다. 
- ondataavailable은 녹화가 멈추면 발생되는 event이다. 
- createObjectURL은 브라우저 메모리에서만 가능한 URL을 만들어준다. 이 URL은 파일을 가리킨다. 이 URL은 서버에 존재하지 않는다. 
- console.log에서 보여질 URL은 웹사이트상에서 존재하는 URL처럼 보이지만 실제로는 존재하지 않는다. 
- 단순히 브라우저의 메모리를 가리키기만 하고 있는 URL이다. 
- a태그에 download라는 속성을 추가해주면 다운로드를 시켜준다.(URL로 넘어가는게 아니라 URL의 콘텐츠를 다운로드 받는다)
- 링크를 body에 추가하는것은 매우 중요하다. body에 존재하지 않는 링크는 클릭할수 없기때문이다. 
- stream은 우리가 어딘가에 넣어둘 0과 1로 이루어진 데이터를 의미한다. 또한 실시간으로 재생되는 무언가라는 의미이기도하다. 
- 카메라가 stream을 받아오고, 그걸 video 요소에 담아준다. 

### WEBASSEMBLY VIDEO TRANSCODE
- FFmpeg는 세계 최고의 소프트웨어중 하나이다. 비디오나 오디오같은 어떤 종류의 미디어 파일을 다룰수 있다. 
- 비디오를 압축하거나 비디오 포맷을 변환해야 하거나 비디오에서 오디오를 추출하고 싶거나 비디오에서 스크린샷을 찍고 싶거나하는 많은것들을 FFmpeg로 할수 있다.  
- FFmpeg를 실행하려면 백엔드에서만 실행해야한다. 그러면 아주 좋은 서버가 필요하다. 메모리가 필요하고 그래픽 장치가 필요하다. 
- 이 문제를 해결하기위해 WebAssembly가 있다. 
- WebAssembly는 웹사이트가 매우 빠른 코드를 실행할수 있게 해준다. javascript를 쓰지 않고, 다른 종류의 프로그램을 사용할수 있다. 
- 웹어셈블리를 사용하면 프런트에서 정말 빠른 코드를 실행할수있다. 
- 실행비용이 큰 프로그램들을 브라우저에서 실행할수 있다. 
- 웹어셈블리로 언젠가는 아무것도 설치하지 않고도 브라우저에서 전체 비디오 게임을 실행하게 될것이다. 
- ffmpeg.wasm는 비디오를 변환하기 위해 사용자의 컴퓨터를 사용한다. 
- 유튜브는 업로드된 비디오를 그들의 비싼 서버에서 변환한다. 그러나 우리는 사용자의 브라우저에서 비디오를 변환한다.(사용자 컴퓨터의 처리능력을 사용) 
- npm install @ffmpeg/ffmpeg @ffmpeg/core
- webm에서 mp4로 변환하는 이유는 모든기기들이 webm을 이해하지 못하기 때문이다. iOS에서는 webm비디오를 볼수 없을수도 있다. mp4는 모두가 이해한다.
- event.data에는 binary data가 있는데 createObjectURL을 사용해서 파일일 수도 있는 binary data에 접근할 수 있어야한다.
- ffmpeg.load()에 await을 하는이유는 사용자가 소프트웨어를 사용할것이기 때문이다. 사용자가 무언가을 설치해서 javascript가 아닌 코드를 사용한다. 우리 웹사이트에서 다른 소프트웨어를 사용한다. 멋진일이지만, 소프트웨어가 무거울수 있기 때문에 기다려줘야한다.  
- 썸네일은 영상을 열때 영상의 첫 프레임이나, 1초의 스크린샷을 찍어서 jpg파일로 저장해서 사용한다. 