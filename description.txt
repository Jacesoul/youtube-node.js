### basics
- node_modules에는 npm으로 설치한 모든 패키지가 저장된다.
- dependencies는 프로젝트가 작동되려면 필요한 패키지들이다.
- npm i express를 명령할때 express가 의존하고 있는 dependencies들도 같이 설치가 된다. 
- npm은 package.json을 보고 dependencies를 찾아서 그 안에 있는 모듈을 설치한다. 
- package-lock.json은 패키지들을 안전하게 관리해준다. 
- node_modules는 파일이 크기때문에 .gitignore에 넣어준다.
- package.json은 텍스트 파일이기 때문에 내용을 수정하고 저장해도 문제가 되지 않는다. 이미 모든게 node_modules폴더에 설치되어있다. 
- devDependencies는 개발자에게 필요한 dependencies이다.
- dependencies는 프로젝트가 필요한 패키지이고 devDependencies는 개발자에게 필요한 패키지다. 
- 자동차에 비유한다면 자동차의 연료는 dependencies이고 차에서 음악을 들을수 있게 하는건 devDependencies이다. 

### Babel 
- 바벨은 자바스크립트 컴파일러이다.
- nodeJS가 이해하지 못하는 최신 자바스크립트 코드가 있다. 
- 바벨은 우리가 작성한 최신 자바스크립트를 컴파일해준다. 
- nodeJS를 위한 바벨 사용하기(npm i --save-dev @babel/core)
- npm install @babel/preset-env @babel/node --save-dev 
- preset은 바벨의 플러그인이다. 
- babel-node가 최신 자바스크립트 문법 코드로 index.js를 실행시켜준다.
- babel-node를 사용하기 위해 babel.config.json파일을 생성해서 babel에 추가하고 싶은 플러그인을 넣는다. 

### Express
- 서버는 24시간 내내 온라인에 연결된 컴퓨터라고 할수있다. (request를 listening하고 있다.)
- callback은 서버가 시작될때 작동하는 함수다. 
- port는 컴퓨터의 문과 같다. 
- GET은 HTTP method이다. 
- HTTP는 서버가 소통하는 방법이다. 
- GET은 "저 페이지를 갖다줘" 라는 의미이다. 
- GET Request를 Response할 서버가 필요하다. 
- express에서 route handler에는 addEventListener처럼 event는 없지만 request, response object가 있다.
- resquest를 받으면 response를 return해야한다. res.end() / res.send("I still love you.")

### middleware
- middleware는 중간(middle)에 있는 software다. 
- 결국 모든것이 middleware이다. 
- middleware는 request와 response의 사이에 있다. 
- 모든 controller(handler)는 middleware이고 모든 middleware는 controller(handler)이다. 
- next argument는 다음 함수를 호출해준다. 
- app.get에서 get은 path를 필요로한다. path는 URL이고 handler에는 다수의 handler를 사용할수 있다. 
- app.get의 2번째 인자에는 함수가 들어가야한다.
- handler는 middleware가 될수 있다. 
- middleware는 작업을 다음 함수에게 넘기는 함수이다. 
- app.use()는 global middleware를 만들수 있게 해준다. (순서가 매우 중요!)
- app.use()에 middleware를 두면 모든 route에 적용된다. 
- middleware가 next() 호출하지 않으면 다음 함수들은 실행되지 않는다. 
- 관습적으로 응답을 해주는 마지막 controller에는 next를 쓰지 않는다. 
- middleware를 global하게 쓰려면 맨위에 있어야한다. 
- npm i morgan (HTTP logger)
- morgan함수는 middleware를 리턴해준다. 

### Router
- Router는 컨트롤러와 URL의 관리를 쉽게해준다. 
- 모든 파일은 모듈이고, 거품과도 같다. 
- import하기 위해서는 먼저 export를 해야한다. 
- 하나의 파일 안에 있는 모든건 다른 파일로 부터 완전히 private 상태이다. 
- default export를 하면 import를 할때 원하는 이름으로 바꿀수있다. 
- 파일은 한가지 default export 밖에 가질수없다.  
- /:id는 pathparameter이다. 
- /upload가 /:id보다 위에 있어야 하는이유는 :id자리에 upload가 오면 id로 인식한다.  
- 정규식은 문자열로부터 특정정보를 추출하내는 방법이다. 

### PUG
- Pug는 템플릿 엔진이다. 
- npm i pug
- 뷰엔진 셋팅 app.set("view engine", "pug");
- views 폴더 생성
- pug가 파일을 렌더링해서 평범한 html로 변환해준다. 
- cwd(current working directory)는 package.json에서 node.js를 실행하고 있는 장소가 된다. 
- 뷰엔진은 process.cwd() + "/views"에서 작동한다. 
- app.set("views", process.cwd() + "/src/views");
- pug파일안에 자바스크립트 코드를 넣을수 있다. #{}
- pug는 watch.pug에 있는 코드를 받아서 모든걸 체크하고 자바스크립트를 실행한다. 그리고 그것을 유저에게 제공한다. 이것을 렌더링이라고 함. 
- partials폴더를 만들어서 반복되는 html 문서를 include할수있다. 
- extends를 통해 pug파일을 상속할수 있다. 
- block을 통해서 필요한 부분에 내용을 넣을수 있다. 
- block은 확장한 템플릿 안에 내용을 넣을 수 있는 창문 또는 문과 같다. 
- res.render()에서 1번째 인자는 받을 파일 이름이고 2번째인자는 pug파일에서 받는 변수이다. 
- 조금더 이쁜 CSS를 위해 MVP CSS 임포트하기 (임시방편)
- <link rel="stylesheet" href="https://unpkg.com/mvp.css">
- h1=pageTitle은 h1 #{pageTitle}과 같다. 
- h1태그에 하나의 variable 값만 넣는 경우라면 h1=pageTitle로 하면 된다. 
- mixin은 데이터를 받을수 있는 partial을 말한다. 
- #{} 방식은 attribute(href,class,id)에는 적용할수없다. (백틱사용하기 자바스크립트 template literal)
- href의 앞머리 부분에 /를 넣으면 어디에 있든 상관없이 root경로 + /으로 가게 되어있다. (absolute url)
- 그러나 /를 지우면 relative url이 된다. 

### Parameter
- GET 방식은 구글이나 네이버에서 뭔가를 검색할때 그 검색어가 주소창에 포함되어 있다. 
- POST 방식은 파일을 보내거나, database에 있는 값을 바꾸는 뭔가를 보낼때 사용한다. 
- res.redicrect()는 브라우저가 redicrect(자동으로 이동)하도록 한다. 
- express.urlencoded()을 사용하면 form의 body를 이해할수있다. 
- express.urlencoded()의 옵션중 extended는 body에 있는 정보들을 보기 좋게 형식을 갖춰주는 일을 한다. 
- server.js에서 routes를 사용하기 전에 express.urlencoded() middleware를 사용해야한다. 
- express application이 form의 value들을 이해할수 있도록 하고 우리가 쓸수 있는 멋진 자바스크립트 형식으로 변형시켜준다. 
- req.body는 form에 있는 value의 javascript representation이다.    
- input태그에서 name을 명시해줘야 req.body를 받을수있다. 
- controller 생성 -> router 생성(해당 컨트롤러 사용) 

### Database(mongoDB, mongoose)
- mongoDB는 document-based(문서기반)이다. 
- 일반적인 데이터베이스는 sql-based이다.(엑셀같은 행기반)
- mongoDB에서 저장하는 것들은 JSON-like-document이다. 
- mongoDB macOS 설치방법
```bash
install mongoDB Community Edition
xcode-select --install
brew tap mongodb/brew
brew install mongodb-commnunity@4.4
brew services start mongodb-commnunity@4.4
```
- mongoose는 node.js와 mongoDB를 이어주는 다리가 된다. 
- mongoDB가 잘설치되었는지 확인하기 위해 터미널에서 mongo입력후 show dbs
- npm i mongoose
- server.js에 db.js를 import를 하면 mongoDB와 연결을 할수있다. 
- database가 알아야 할것은 데이터가 어떻게 생겼는가이다. 
- model을 생성하기 전에 먼저 model의 형태(schema)를 정의해줘야한다. 
- db를 mongoose와 연결시켜서 video model을 인식시킨다. 
